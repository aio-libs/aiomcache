name: CI

on: [pull_request, push]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -U setuptools
        pip install -r requirements.txt
        pip install -e .
        pip install codecov
    - name: Run memcached service
      uses: jkeys089/actions-memcached@master
    - name: Run tests
      run: |
        make cov
        python setup.py check -rm
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml
        flags: unit

  check:  # This job does nothing and is only used for the branch protection
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  deploy:
    name: Deploy
    environment: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [check]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - name: Update pip, wheel, setuptools, build, twine
      run: |
        python -m pip install -U pip wheel setuptools build twine
    - name: Build dists
      run: |
        python -m build
    - name: Make Release
      uses: aio-libs/create-release@v1.3.3
      with:
        changes_file: CHANGES.rst
        name: aiomcache
        version_file: aiomcache/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_API_TOKEN }}
        dist_dir: dist
        fix_issue_regex: "`#(\\d+) <https://github.com/aio-libs/aiomcache/issues/\\1>`"
        fix_issue_repl: "(#\\1)"
